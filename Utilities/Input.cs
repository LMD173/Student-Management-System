using System.Text.RegularExpressions;

namespace StudentManagementSystem.Utilities;

/// <summary>
/// A utility class with methods for reading input from the console.
/// </summary>
public class Input
{
    private Input() { }

    /// <summary>
    /// Reads input from the console.
    /// </summary>
    /// 
    /// <param name="acceptEmpty">Whether to accept empty input</param>
    /// <param name="regex">An optional regex pattern to validate the input</param>
    /// 
    /// <returns>The string value of the input.</returns>
    public static string ReadInput(bool acceptEmpty = false, string? regex = null)
    {
        while (true)
        {
            var input = Console.ReadLine()?.Trim();
            if (input == "" && acceptEmpty) return "";

            if (input is null || (input == "" && !acceptEmpty) || (regex is not null && !Regex.IsMatch(input, regex)))
            {
                Logger.Error("Invalid input, please try again.");
                Logger.Input("");
            }
            else
            {
                return input == "" ? "" : input;
            }
        }
    }

    /// <summary>
    /// Reads input from the console and attempts to parse it into the specified type using reflection
    /// to invoke the TryParse method on the type. The type must have a conventional method
    /// signature of: `public static bool TryParse(string input, out T result)`.
    /// Partially generated by ChatGPT.
    /// </summary>
    /// 
    /// <typeparam name="T">The type to attempt to parse the input into</typeparam>
    /// <param name="acceptEmpty">Whether to accept empty input</param>
    /// <param name="regex">An optional regex pattern to validate the input</param>
    /// 
    /// <returns>The input parsed into the type.</returns>
    public static T? ReadInputGeneric<T>(bool acceptEmpty = false, string? regex = null) where T : struct // T must be a value type
    {
        var tryParseMethod = typeof(T).GetMethod("TryParse", [typeof(string), typeof(T).MakeByRefType()]);
        if (tryParseMethod is null)
        {
            Logger.Fatal("The type does not have a TryParse method.");
            return null;
        }

        static void WarnInvalid()
        {
            Logger.Error("Invalid input, please try again.");
            Logger.Input("");
        }

        while (true)
        {
            var input = Console.ReadLine()?.Trim();
            if (input is null || (input == "" && !acceptEmpty) || (regex is not null && !Regex.IsMatch(input, regex) && !acceptEmpty))
            {
                WarnInvalid();
            }
            else
            {
                var parameters = new object[] { input.Trim(), null! };
                var success = (bool)(tryParseMethod.Invoke(null, parameters) ?? false);
                if (success)
                {
                    return (T)parameters[1];
                }
                else
                {
                    if (acceptEmpty)
                    {
                        return null;
                    }
                    else
                    {
                        WarnInvalid();
                    }
                }
            }
        }
    }
}